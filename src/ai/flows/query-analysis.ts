'use server';

/**
 * @fileOverview An√°lisis sem√°ntico de b√∫squedas del usuario para determinar qu√© informaci√≥n falta
 * y qu√© preguntas hacer en el onboarding.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const QueryAnalysisInputSchema = z.object({
  query: z.string().describe('La b√∫squeda o input inicial del usuario desde la landing.'),
});
export type QueryAnalysisInput = z.infer<typeof QueryAnalysisInputSchema>;

const QueryAnalysisOutputSchema = z.object({
  detected: z.object({
    brand: z.string().nullable().describe('Marca detectada: iPhone, Samsung, Xiaomi, Motorola, Google Pixel, etc.'),
    model: z.string().nullable().describe('Modelo espec√≠fico detectado: 16 Pro, S24 Ultra, etc.'),
    useCase: z.array(z.string()).describe('Usos detectados: fotos, gaming, trabajo, b√°sico, redes sociales'),
    priority: z.array(z.string()).describe('Prioridades t√©cnicas: bater√≠a, c√°mara, velocidad, precio, almacenamiento'),
    budget: z.string().nullable().describe('Presupuesto: econ√≥mico/medio/premium o monto espec√≠fico'),
    special: z.string().nullable().describe('Necesidades especiales: reacondicionado, resistente al agua, dual SIM, etc.'),
  }),
  missing: z.array(z.enum(['useCase', 'priority', 'budget'])).describe('Qu√© informaci√≥n falta y debe preguntarse'),
  isComplete: z.boolean().describe('Si tiene suficiente informaci√≥n para hacer recomendaciones directas'),
});
export type QueryAnalysisOutput = z.infer<typeof QueryAnalysisOutputSchema>;

export async function analyzeQuery(input: QueryAnalysisInput): Promise<QueryAnalysisOutput> {
  return analyzeQueryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeQueryPrompt',
  input: {schema: QueryAnalysisInputSchema},
  output: {schema: QueryAnalysisOutputSchema},
  model: 'googleai/gemini-2.5-flash',
  system: `Eres un analizador sem√°ntico de b√∫squedas de celulares.

**TU TAREA:**
Extraer informaci√≥n estructurada del input del usuario para determinar qu√© falta preguntar.

**REGLAS DE EXTRACCI√ìN:**

1. **SOLO extrae lo EXPL√çCITO:**
   - Si NO est√° mencionado directamente ‚Üí null o array vac√≠o
   - NO inferir ni asumir
   - NO inventar informaci√≥n

2. **brand:** Detectar marca espec√≠fica
   - V√°lidos: "iPhone", "Samsung", "Xiaomi", "Motorola", "Google Pixel", "Realme", "OPPO", "Huawei"
   - Si dice gen√©rico ("celular", "smartphone") ‚Üí null

3. **model:** Detectar modelo espec√≠fico
   - Ejemplos: "16 Pro", "S24 Ultra", "Redmi Note 13"
   - Solo si menciona modelo exacto

4. **useCase:** Array de usos detectados
   - V√°lidos: "fotos", "gaming", "trabajo", "b√°sico", "redes sociales", "videos", "streaming"
   - Ejemplos:
     * "para fotos" ‚Üí ["fotos"]
     * "trabajo y fotos" ‚Üí ["trabajo", "fotos"]
     * "solo WhatsApp" ‚Üí ["b√°sico"]

5. **priority:** Array de prioridades t√©cnicas
   - V√°lidos: "bater√≠a", "c√°mara", "velocidad", "precio", "almacenamiento", "pantalla"
   - Ejemplos:
     * "que dure todo el d√≠a" ‚Üí ["bater√≠a"]
     * "buena c√°mara y r√°pido" ‚Üí ["c√°mara", "velocidad"]
     * "el m√°s barato" ‚Üí ["precio"]

6. **budget:** Rango de presupuesto
   - Clasificaci√≥n: "econ√≥mico" | "medio" | "premium"
   - O monto espec√≠fico: "AR$200.000", "USD 500"
   - Inferir de palabras clave:
     * "barato", "econ√≥mico", "accesible" ‚Üí "econ√≥mico"
     * "gama media", "equilibrado" ‚Üí "medio"
     * "premium", "lo mejor", "sin l√≠mite" ‚Üí "premium"

7. **special:** Necesidades especiales
   - Ejemplos: "reacondicionado", "resistente al agua", "dual SIM", "carga r√°pida", "5G"

**CRITERIO DE COMPLETITUD:**

\`isComplete = true\` SI tiene AL MENOS 2 de:
- brand O model
- useCase (al menos 1)
- priority (al menos 1)
- budget

**missing:** Array de lo que falta preguntar:
- Si no tiene useCase ‚Üí incluir "useCase"
- Si no tiene priority ‚Üí incluir "priority"
- Si no tiene budget ‚Üí incluir "budget"
- Orden de prioridad: budget > useCase > priority

**EJEMPLOS:**

Input: "iPhone 16 econ√≥mico"
‚Üí brand: "iPhone", model: "16", budget: "econ√≥mico"
‚Üí missing: ["useCase", "priority"]
‚Üí isComplete: false

Input: "celular para fotos y gaming, gama alta"
‚Üí useCase: ["fotos", "gaming"], budget: "premium"
‚Üí missing: []
‚Üí isComplete: true

Input: "Samsung con buena bater√≠a"
‚Üí brand: "Samsung", priority: ["bater√≠a"]
‚Üí missing: ["useCase", "budget"]
‚Üí isComplete: false

Input: "celular bueno"
‚Üí Todo vac√≠o
‚Üí missing: ["useCase", "priority", "budget"]
‚Üí isComplete: false`,

  prompt: `Analiza esta b√∫squeda y extrae informaci√≥n estructurada:

"{{{query}}}"

Recuerda: SOLO extrae lo expl√≠cito. No inventes.`,
});

const analyzeQueryFlow = ai.defineFlow(
  {
    name: 'analyzeQueryFlow',
    inputSchema: QueryAnalysisInputSchema,
    outputSchema: QueryAnalysisOutputSchema,
  },
  async input => {
    console.log('üîç Analizando query:', input.query);
    const {output} = await prompt(input);
    console.log('‚úÖ An√°lisis completo:', output);
    return output!;
  }
);
